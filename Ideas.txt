#ifndef TEXT_H
#define TEXT_H
#include <QPainter>
#include <QGraphicsItem>
#include <QGraphicsScene>


class Text : public QGraphicsItem
{
public:
    Text();
    bool game_over;

    void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);
    QRectF boundingRect() const;
};

#endif // TEXT_H




#ifndef MAP_H
#define MAP_H
#include <QPainter>
#include <QGraphicsItem>
#include <QGraphicsScene>

class Map: public QGraphicsItem
{
public:
    Map();
    QPixmap mappic;
    void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);
    QRectF boundingRect() const;
};
#endif // MAP_H




#ifndef PLAYER_H
#define PLAYER_H
#include <QPainter>
#include <QGraphicsItem>
#include <QGraphicsScene>
#include "point.h"
#include <QVector>

class Player : public QGraphicsItem
{
public:
    Player(bool player, int start_x, int start_y, int start_dir);
    bool is_player;
    const int W = 60;
    const int H = 48;
    Point current;
    QVector<Point> trace;
    int x,y,dir;
    bool Game;

    QPainter *paintPlayer;
    QPointF *place;

    void tick();
    void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);
    QRectF boundingRect() const;
    ~Player();
};
#endif // PLAYER_H




#ifndef POINT_H
#define POINT_H

class Point
{
public:
    Point();
    int mp_x;
    int mp_y;


};
#endif // POINT_H







#include "gamewindow.h"
#include "ui_gamewindow.h"
#include <QMessageBox>


GameWindow::GameWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::GameWindow)
{
    ui->setupUi(this);


    scene = new QGraphicsScene(this);
    ui->graphicsView->setScene(scene);
    ui->graphicsView->setRenderHint(QPainter::Antialiasing);
    scene->setSceneRect(0,0,602,482);
    ui->graphicsView->setSceneRect(scene->sceneRect());

    tron_map = new Map;
    scene->addItem(tron_map);

    /*draw_text=new Text;
    scene->addItem(draw_text);
    draw_text->setZValue(7);*/

    scene->update();

    start_Game();



}
//----------------------------------------------------------------

void GameWindow::start_Game()
{

    p1 = new Player(0,10,10,0);
    scene->addItem(p1);
    p2 = new Player(1,50,38,3);
    scene->addItem(p2);

    timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()), this,SLOT(updater()));
    this->show();
    scene->update();
    this->update();

    timer->start(120);


}
//----------------------------------------------------------------
void GameWindow::end_Game()
{

    scene->removeItem(p1);
    scene->removeItem(p2);
    scene->update();

}
//----------------------------------------------------------------

//----------------------------------------------------------------
void GameWindow::keyPressEvent(QKeyEvent *event)
{

    switch(event->key())
    {
        //case Qt::Key_Space:


        case Qt::Key_W:
            if(p1->dir != 0) p1->dir=3;
            break;

        case Qt::Key_A:
            if(p1->dir != 2) p1->dir=1;
            break;

        case Qt::Key_D:
            if(p1->dir != 1) p1->dir=2;
            break;

        case Qt::Key_S:
            if(p1->dir != 3) p1->dir=0;
            break;


        case Qt::Key_J:
            if(p2->dir != 2) p2->dir=1;
            break;

        case Qt::Key_L:
            if(p2->dir != 1) p2->dir=2;
            break;

        case Qt::Key_K:
            if(p2->dir != 3) p2->dir=0;
            break;

        case Qt::Key_I:
            if(p2->dir != 0) p2->dir=3;
            break;

        default:
            break;
    }
}
void GameWindow::updater()
{
    checklost();
    player_move();
    scene->update();
}

void GameWindow::checklost()
{
    for(int i = 0; i<p1->trace.size() ; ++i)
    {
        if (i != 0)
        {
            if( (p1->current.mp_x == p1->trace[i-1].mp_x && p1->current.mp_y == p1->trace[i-1].mp_y) ||
                (p2->current.mp_x == p2->trace[i-1].mp_x && p2->current.mp_y == p2->trace[i-1].mp_y) ||
                (p1->current.mp_x == p2->trace[i-1].mp_x && p1->current.mp_y == p2->trace[i-1].mp_y) ||
                (p2->current.mp_x == p1->trace[i-1].mp_x && p2->current.mp_y == p1->trace[i-1].mp_y) )

            {
                timer->stop();
                end_Game();

            }
        }

    }
}
void GameWindow::player_move()
{
    p1->tick();
    p1->current.mp_x = p1->x;
    p1->current.mp_y = p1->y;
    p1->trace.insert(p1->trace.end(), p1->current);

    p2->tick();
    p2->current.mp_x = p2->x;
    p2->current.mp_y = p2->y;
    p2->trace.insert(p2->trace.end(), p2->current);
}

GameWindow::~GameWindow()
{
    delete ui;
}








#include "gamewindow.h"
#include <QApplication>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    GameWindow w;
    w.show();
    return a.exec();
}








#include "map.h"

Map :: Map()
{
    mappic.load(":/images/background.jpg");

}
QRectF Map::boundingRect() const
{
    return QRect(0,0,600,480);
}

void Map::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    painter->drawPixmap(0,0,600,480,mappic);

}










#include "player.h"



Player :: Player(bool player, int start_x, int start_y, int start_dir)
{
    x = start_x;
    y = start_y;
    dir = start_dir;
    current.mp_x = x;
    current.mp_y = y;
    Game = 1;
    is_player = player;
    paintPlayer = new QPainter;
    place = new QPointF;
    //paintPlayer->setPen(color);



}

void Player :: tick()
{
    if(dir == 0) y+=1;
    if(dir == 1) x-=1;
    if(dir == 2) x+=1;
    if(dir == 3) y-=1;

    if(x >= W) x = 0;
    if(x < 0) x = W - 1;
    if(y >= H) y = 0;
    if(y < 0) y = H - 1;
}

QRectF Player::boundingRect() const
{
    return QRect(x, y, 2, 2);
}

void Player::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
{
/*
    tick();
    current.m_x = x;
    current.m_y = y;
    trace.insert(trace.end(), current);*/
    paintPlayer = painter;
    for(int i = 0; i<trace.size(); ++i)
    {
        place->setX(10*trace[i].mp_x);
        place->setY(10*trace[i].mp_y);
        if(!is_player)
        {
            paintPlayer->setBrush(QBrush(QColor(0, 0, 255, 255)));
        }
        else
        {
            paintPlayer->setBrush(QBrush(QColor(255, 0, 0, 255)));
        }
        paintPlayer->drawEllipse(*place, 5,5);

    }


}

Player:: ~Player()
{
    delete place;
    //delete paintPlayer;
}








#include "point.h"


Point::Point()
{

}






